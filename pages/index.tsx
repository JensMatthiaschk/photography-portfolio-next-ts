import type { Photo } from '@/types';
import Head from 'next/head';
import Image from 'next/image';
import { Inter } from 'next/font/google';
import Link from 'next/link';
import { Tab } from '@headlessui/react';
import classNames from 'classnames';
import nodeFetch from 'node-fetch'
import { createApi } from 'unsplash-js';
import bgImage from '../public/photography-bg.webp';
import { GetStaticProps } from 'next';
import { Gallery } from '../components/Gallery';
import { getImages } from '../utils/image-util';
import { useMemo } from 'react';

const inter = Inter({ subsets: ['latin'] })

const tabs = [
  {
    key: 'all',
    display: 'All',
  },
  {
    key: 'oceans',
    display: 'Oceans'
  },
  {
    key: 'forests',
    display: 'Forests'
  }
]



type HomeProps = {
  oceans: Photo[];
  forests: Photo[]
};

export const getStaticProps: GetStaticProps<HomeProps> = async () => {

  const unsplash = createApi({
    accessKey: process.env.USPL_ACCESS_KEY!,
    fetch: nodeFetch as unknown as typeof fetch,
  });


  const [oceans, forests] = await Promise.all([
    getImages(unsplash, 'oceans'),
    getImages(unsplash, 'forests')
  ])

  return {
    props: {
      oceans,
      forests,
    },
    revalidate: 10,
  };
};



export default function Home({ oceans, forests }: HomeProps) {


  const allPhotos = useMemo(() => {
    const all = [...oceans, ...forests]

    return all.sort((a, b) => b.likes - a.likes)
  }, [oceans, forests]);

  return (
    <div className="h-full overflow-auto">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      < Image
        src={bgImage}
        alt="#"
        className="fixed top-0 left-0 w-full h-full"
        placeholder='blur'
      ></Image>

      <div className="fixed left-0 top-0 w-full h-full bg-gradient-to-t from-stone-900" />
      <header className="fixed w-full z-10 top-0 flex justify-between items-center h-[90px] px-6 bg-stone-900">
        <span className="uppercase text-lg font-medium px-10">Photography Portfolio</span>
        <Link href="#" className="rounded-3xl bg-white text-stone-700 px-3 py-2 hover:bg-opacity-90">
          Get in touch
        </Link>
      </header>
      <main className="relative pt-[110px]">
        <div className="flex flex-col items-center h-full">
          <Tab.Group>
            <Tab.List className="flex items-center gap-12">
              {tabs.map((tab) =>
                <Tab key={tab.key} className="p-2">{({ selected }) => <span className={classNames("uppercase text-lg", selected ? 'text-white' : 'text-stone-600')}>{tab.display}</span>}</Tab>
              )}
            </Tab.List>
            <Tab.Panels className="h-full max-w-[900px] w-full p-2 sm:p-4 my-6">
              <Tab.Panel className="">
                <Gallery photos={allPhotos} />
              </Tab.Panel>
              <Tab.Panel><Gallery photos={oceans} /></Tab.Panel>
              <Tab.Panel><Gallery photos={forests} /></Tab.Panel>
            </Tab.Panels>
          </Tab.Group>
        </div>
      </main >
      <footer className="relative flex justify-center items-center h-[90px] uppercase text-lg font-medium">
        <p>Photography Portfolio</p>
      </footer>
    </div >
  )
}

type GalleryProps = {
  photos: Photo[]
}



